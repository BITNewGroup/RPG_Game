#include "stdafx.h"  
#include <stdio.h>  
  
//Definition of a structure 
struct chr  
{  
    int     nHp;  
    int     fHp;  
    int     lv;  
    int     w;  
    int     kind;  
};  
  
//Global variable declaration 
HINSTANCE hInst;  
HBITMAP bg,sheep,girl,skill,skillult,slash,magic,recover,game;  
HDC     hdc,mdc,bufdc;  
HWND    hWnd;  
DWORD   tPre,tNow;  
int     pNum,f,txtNum;  
bool    attack,over;  
chr     player,monster;  
char    text[5][100];  
  
  
  
  
//Global function declaration  
ATOM                MyRegisterClass(HINSTANCE hInstance);  
BOOL                InitInstance(HINSTANCE, int);  
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);  
void                MyPaint(HDC hdc);  
void                MsgInsert(char*);  
void                CheckDie(int hp,bool player);  
  
//****WinMain function£¬The procedure entry pointfunction**************************************  
int APIENTRY WinMain(HINSTANCE hInstance,  
                     HINSTANCE hPrevInstance,  
                     LPSTR     lpCmdLine,  
                     int       nCmdShow)  
{  
    MSG msg;  
  
    MyRegisterClass(hInstance);  
  
    //initialization    
    if (!InitInstance (hInstance, nCmdShow))   
    {  
        return FALSE;  
    }  
  
    //Message Loop  
    GetMessage(&msg,NULL,NULL,NULL);            //initialization msg      
    while( msg.message!=WM_QUIT )  
    {  
        if( PeekMessage( &msg, NULL, 0,0 ,PM_REMOVE) )  
        {  
            TranslateMessage( &msg );  
            DispatchMessage( &msg );  
        }  
        else  
        {  
            tNow = GetTickCount();  
            if(tNow-tPre >= 40)  
                MyPaint(hdc);  
        }  
    }  
  
    return msg.wParam;  
}  
  
//***Design of a window class, similar to the fill-in, using a window structure*************************  
ATOM MyRegisterClass(HINSTANCE hInstance)  
{  
    WNDCLASSEX wcex;  
  
    wcex.cbSize = sizeof(WNDCLASSEX);   
    wcex.style          = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS;  
    wcex.lpfnWndProc    = (WNDPROC)WndProc;  
    wcex.cbClsExtra     = 0;  
    wcex.cbWndExtra     = 0;  
    wcex.hInstance      = hInstance;  
    wcex.hIcon          = NULL;  
    wcex.hCursor        = NULL;  
    wcex.hCursor        = LoadCursor(NULL, IDC_ARROW);  
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);  
    wcex.lpszMenuName   = NULL;  
    wcex.lpszClassName  = "canvas";  
    wcex.hIconSm        = NULL;  
  
    return RegisterClassEx(&wcex);  
}  
  
//****Initialization function************************************  
//Load the bitmap and set various initial value   
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)  
{  
    HBITMAP bmp;  
    hInst = hInstance;  
  
    hWnd = CreateWindow("canvas", "New Group Attack System" , WS_OVERLAPPEDWINDOW,  
        CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);  
  
    if (!hWnd)  
    {  
        return FALSE;  
    }  
  
    MoveWindow(hWnd,10,10,640,510,true);  
    ShowWindow(hWnd, nCmdShow);  
    UpdateWindow(hWnd);  
  
    hdc = GetDC(hWnd);  
    mdc = CreateCompatibleDC(hdc);  
    bufdc = CreateCompatibleDC(hdc);  
  
    bmp = CreateCompatibleBitmap(hdc,640,510);  
    SelectObject(mdc,bmp);  
  
    bg = (HBITMAP)LoadImage(NULL,"bg.bmp",IMAGE_BITMAP,640,510,LR_LOADFROMFILE);  
    sheep = (HBITMAP)LoadImage(NULL,"sheep.bmp",IMAGE_BITMAP,133,220,LR_LOADFROMFILE);  
    girl = (HBITMAP)LoadImage(NULL,"girl.bmp",IMAGE_BITMAP,480,148,LR_LOADFROMFILE);  
    skill = (HBITMAP)LoadImage(NULL,"skill.bmp",IMAGE_BITMAP,50,50,LR_LOADFROMFILE);  
    skillult = (HBITMAP)LoadImage(NULL,"skillult.bmp",IMAGE_BITMAP,50,50,LR_LOADFROMFILE);  
    slash = (HBITMAP)LoadImage(NULL,"slash.bmp",IMAGE_BITMAP,196,162,LR_LOADFROMFILE);  
    magic = (HBITMAP)LoadImage(NULL,"magic.bmp",IMAGE_BITMAP,200,100,LR_LOADFROMFILE);  
    recover = (HBITMAP)LoadImage(NULL,"recover.bmp",IMAGE_BITMAP,300,150,LR_LOADFROMFILE);  
    game = (HBITMAP)LoadImage(NULL,"over.bmp",IMAGE_BITMAP,289,74,LR_LOADFROMFILE);  
  
    player.nHp = player.fHp = 50;   //Setting the value of life and the player character limit  
    player.lv = 2;                  //Setting the player character level  
    player.w  = 4;                  //Setting weights attack damage  
  
    monster.nHp = monster.fHp = 120;    //Setting the value of life and limit the role of the monster  
    monster.lv = 1;                     //Setting monster character level  
    monster.w = 1;                      //Setting weights attack damage  
  
    txtNum = 0;     //The number of messages displayed  
  
    SetBkMode(mdc, TRANSPARENT);    //Setting TextOut background transparent  
  
      
  
  
    MyPaint(hdc);  
  
    return TRUE;  
}  
  
//****Custom drawing functions*********************************  
// 1.Screen map display with the war news display  
// 2.Analyzing the behavior of monsters and various data processing and calculation 
void MyPaint(HDC hdc)  
{  
    char str[100];  
    int i,damage;  
  
    //Paste background  
    SelectObject(bufdc,bg);  
    BitBlt(mdc,0,0,640,510,bufdc,0,0,SRCCOPY);  
  
    //Display attack messages
      
      
          
    for(i=0;i<txtNum;i++)  
        TextOut(mdc,0,360+i*18,text[i],strlen(text[i]));  
  
    //Paste Monster image  
    if(monster.nHp>0)  
    {  
        SelectObject(bufdc,sheep);  
        BitBlt(mdc,70,180,133,110,bufdc,0,110,SRCAND);  
        BitBlt(mdc,70,180,133,110,bufdc,0,0,SRCPAINT);  
        sprintf(str,"%d / %d",monster.nHp,monster.fHp);  
        TextOut(mdc,100,320,str,strlen(str));  
    }  
  
    //Paste players image  
    if(player.nHp>0)  
    {  
        SelectObject(bufdc,girl);  
        BitBlt(mdc,500,200,60,74,bufdc,pNum*60,74,SRCAND);  
        BitBlt(mdc,500,200,60,74,bufdc,pNum*60,0,SRCPAINT);  
        sprintf(str,"%d / %d",player.nHp,player.fHp);  
        TextOut(mdc,510,320,str,strlen(str));  
    }  
  
    if(over)                //Paste game over picture  
    {  
        SelectObject(bufdc,game);  
        BitBlt(mdc,200,200,289,37,bufdc,0,37,SRCAND);  
        BitBlt(mdc,200,200,289,37,bufdc,0,0,SRCPAINT);  
    }  
    else if(!attack)        //Paste the attack order picture  
    {  
        SelectObject(bufdc,skill);  
        BitBlt(mdc,500,350,50,50,bufdc,0,0,SRCCOPY);  
        SelectObject(bufdc,skillult);  
        BitBlt(mdc,430,350,50,50,bufdc,0,0,SRCCOPY);  
        //BitBlt(mdc,500,350,74,30,bufdc,0,30,SRCAND);  
        //BitBlt(mdc,500,350,74,30,bufdc,0,0,SRCPAINT);  
    }     
    else  
    {  
        f++;  
  
        //Display icon player attacks 5 to 10 screens 
        if(f>=5 && f<=10)  
        {  
            SelectObject(bufdc,slash);  
              
            BitBlt(mdc,100,160,98,162,bufdc,98,0,SRCAND);  
            BitBlt(mdc,100,160,98,162,bufdc,0,0,SRCPAINT);  
  
            //Article 10 Calculation of screen monster hurt degree and added the message  
            if(f == 10)  
            {  
  
                if (4==rand()%5)                   // 20% chance to trigger Phantom Assassin big move, four times the crit damage
                {  
                    damage = 4*(rand()%10 + player.lv*player.w);  
                    monster.nHp -= (int)damage;  
  
                    sprintf(str,"Ohhh, big move£¬four times the crit damage...%d damage",damage);  
                }   
                else  
                {  
                    damage = rand()%10 + player.lv*player.w;  
                    monster.nHp -= (int)damage;  
  
                    sprintf(str,"Hurt like a general...%d damage",damage);  
                }  
  
  
                  
                MsgInsert(str);  
  
                CheckDie(monster.nHp,false);  
            }  
        }  
  
        srand(tPre);  
  
        //Analyzing the 15 pictures monster Which action 
        if(f == 15)  
        {  
            if(monster.nHp > 20)             //Life greater than 20  
            {  
                if(rand()%5 != 1)          //Claw attack carried probability 4/5 
                    monster.kind = 0;  
                else                       //Chain Lightning attack carried probability 1/5  
                    monster.kind = 1;      
            }  
            else                                //The value of life is less than 20  
            {  
                switch(rand()%5)  
                {  
                    case 0:                     //Claw Attack  
                        monster.kind = 0;  
                        break;  
                    case 1:                     //Chain Lightning release  
                        monster.kind = 1;  
                        break;  
                    case 2:                     //A fatal blow  
                        monster.kind = 2;  
                        break;  
                    case 3:                     //Reply life, using Mekansm  
                        monster.kind = 3;  
                        break;  
                    case 4:                     //Run away  
                        monster.kind = 4;  
                        break;  
                }  
            }  
        }  
  
        //The 26~30 pictuer show icon  
        if(f>=26  && f<=30)  
        {  
            switch(monster.kind)  
            {  
                case 0:                         //Claw Attack  
                    SelectObject(bufdc,slash);  
                    BitBlt(mdc,480,150,98,162,bufdc,98,0,SRCAND);  
                    BitBlt(mdc,480,150,98,162,bufdc,0,0,SRCPAINT);  
  
                    //Calculation of the 30 turn injured and the extent of the screen displays the message  
                    if(f == 30)  
                    {  
                        damage = rand()%10 + monster.lv*monster.w;  
                        player.nHp -= (int)damage;  
                          
                        sprintf(str,"Monster Claw attack...Causing players %d damage",damage);  
                        MsgInsert(str);  
  
                        CheckDie(player.nHp,true);  
                    }  
                    break;  
                case 1:                         //Chain Lightning release  
                    SelectObject(bufdc,magic);  
                    BitBlt(mdc,480,190,100,100,bufdc,100,0,SRCAND);  
                    BitBlt(mdc,480,190,100,100,bufdc,0,0,SRCPAINT);  
  
                    //Calculation of the 30 turn injured and the extent of the screen displays the message    
                    if(f == 30)  
                    {  
                        damage = rand()%10 + 3*monster.w;  
                        player.nHp -= (int)damage;    
                          
                        sprintf(str,"Chain Lightning cast monster...Causing players %d damage",damage);  
                        MsgInsert(str);  
  
                        CheckDie(player.nHp,true);  
                    }  
                    break;  
                case 2:                         //Fatal blow  
                    SelectObject(bufdc,slash);  
                    BitBlt(mdc,480,150,98,162,bufdc,98,0,SRCAND);  
                    BitBlt(mdc,480,150,98,162,bufdc,0,0,SRCPAINT);  
  
                    //Calculation of the 30 turn injured and the extent of the screen displays the message   
                    if(f == 30)  
                    {  
                        damage = rand()%10 + monster.lv*monster.w*5;  
                        player.nHp -= (int)damage;  
                          
                        sprintf(str,"Monster Fatal blow...Causing players %d damage.",damage);  
                        MsgInsert(str);  
  
                        CheckDie(player.nHp,true);  
                    }  
                    break;  
                case 3:                         //Use Mekansm life back  
                    SelectObject(bufdc,recover);  
                    BitBlt(mdc,60,160,150,150,bufdc,150,0,SRCAND);  
                    BitBlt(mdc,60,160,150,150,bufdc,0,0,SRCPAINT);  
  
                    //The 30 turn monster heal added value and displays the message  
                    if(f == 30)  
                    {  
                        monster.nHp += 30;  
                          
                        sprintf(str,"Monster use Mekansm...Recovery 30 health",damage);  
                        MsgInsert(str);  
                    }  
                    break;  
                case 4:  
                    //In the 30 turn determine whether the monster Run away success  
                    if(f == 30)  
                    {  
                        if(1== rand()%3 )   //1/3 chance of Run away 
                        {  
                            over = true;  
                            monster.nHp = 0;  
  
                            sprintf(str,"Minster run away...success..");  
                            MsgInsert(str);  
                        }  
                        else  
                        {  
                            sprintf(str,"Minster run away...Failed");  
                            MsgInsert(str);  
                        }  
                    }  
                    break;  
            }  
        }  
  
        if(f == 30)         //End of turn 
        {  
            attack = false;  
            f = 0;  
        }  
    }  
  
    BitBlt(hdc,0,0,640,510,mdc,0,0,SRCCOPY);  
  
    tPre = GetTickCount();  
  
    pNum++;  
    if(pNum == 8)  
        pNum = 0;  
}  
  
//****Battle new message function********************************  
void MsgInsert(char* str)  
{  
    if(txtNum < 5)  
    {  
        sprintf(text[txtNum],str);  
        txtNum++;  
    }  
    else  
    {  
        for(int i=0;i<txtNum;i++)  
            sprintf(text[i],text[i+1]);  
  
        sprintf(text[4],str);  
    }  
}  
  
//****Life value determination function*************************  
void CheckDie(int hp,bool player)  
{  
    char str[100];  
  
    if(hp <= 0)  
    {  
        over = true;  
        if(player)  
        {  
            sprintf(str,"Victory or defeat is standard issue, please restart the game......");  
            MsgInsert(str);  
        }  
        else  
        {  
            sprintf(str,"You win, niceeeee~~~~~£¡£¡£¡£¡");  
            MsgInsert(str);  
        }  
    }  
}  
  
//****Message processing function***********************************  
//   
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)  
{  
    int x,y;  
  
    switch (message)  
    {  
        case WM_KEYDOWN:                //Keyboard message  
            if(wParam==VK_ESCAPE)       //Press Esc key  
                PostQuitMessage(0);  
            break;  
        case WM_LBUTTONDOWN:            //Messages left mouse button  
            if(!attack)  
            {  
                x = LOWORD(lParam);     //X coordinate  
                y = HIWORD(lParam);     //Y coordinate  
              
                if(x >= 500 && x <= 550 && y >= 350 && y <= 400)  
                    attack = true;  
            }  
            break;  
        case WM_DESTROY:                //Window end message  
            DeleteDC(mdc);  
            DeleteDC(bufdc);  
            DeleteObject(bg);  
            DeleteObject(sheep);  
            DeleteObject(girl);  
            DeleteObject(skill);  
            DeleteObject(skillult);  
            DeleteObject(slash);  
            DeleteObject(magic);  
            DeleteObject(recover);  
            DeleteObject(game);  
  
            ReleaseDC(hWnd,hdc);  
  
            PostQuitMessage(0);  
            break;  
        default:                        //The default message  
            return DefWindowProc(hWnd, message, wParam, lParam);  
   }  
   return 0;  
}  

